<?php

/**
 * @file
 * OpenEuropa Webtools Cookie Consent module.
 */

declare(strict_types=1);

use Drupal\Component\Serialization\Json;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Site\Settings;
use Drupal\Core\Url;
use Drupal\media\IFrameMarkup;
use Drupal\oe_webtools_cookie_consent\Event\ConfigBannerPopupEvent;
use Drupal\oe_webtools_cookie_consent\Event\ConfigVideoPopupEvent;
use Drupal\oe_webtools_cookie_consent\Form\WebtoolsCookieConsentSettingsForm;

define("OE_WEBTOOLS_COOKIE_CONSENT_EMBED_COOKIE_URL", Settings::get('webtools_cookie_consent_embed_cookie_url') ?? 'https://webtools.europa.eu/crs/iframe/');

/**
 * Implements hook_page_bottom().
 */
function oe_webtools_cookie_consent_page_bottom(array &$page_bottom) {
  $event = new ConfigBannerPopupEvent();
  $event_dispatcher = \Drupal::service('event_dispatcher');
  $event_dispatcher->dispatch($event, ConfigBannerPopupEvent::NAME);

  $event_cache = CacheableMetadata::createFromObject($event);
  $existing_cache = CacheableMetadata::createFromRenderArray($page_bottom);

  $cache = $event_cache->merge($existing_cache);
  $cache->applyTo($page_bottom);

  if ($event->isBannerPopup()) {
    $page_bottom['#attached']['library'][] = 'oe_webtools/drupal.webtools-smartloader';
    $script_values = [
      'utility' => 'cck',
    ];

    $url = \Drupal::config(WebtoolsCookieConsentSettingsForm::CONFIG_NAME)->get('cookie_notice_url');
    if ($url) {
      $script_values['url'] = $url;
    }

    $page_bottom['oe_webtools_cookie_consent'][] = [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#value' => Json::encode($script_values),
      '#attributes' => ['type' => 'application/json'],
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Because the oEmbed format comes with the actual HTML iframe,
 * we have to change its "src" attribute value
 * with the URL of the Cookie Consent service, passing the original URL to it.
 */
function oe_webtools_cookie_consent_preprocess_media_oembed_iframe(array &$variables): void {
  $event = new ConfigVideoPopupEvent();
  $event_dispatcher = \Drupal::service('event_dispatcher');
  $event_dispatcher->dispatch($event, ConfigVideoPopupEvent::NAME);

  // Add the cache tag, so that the output gets invalidated when the config is
  // saved.
  \Drupal::service('renderer')->addCacheableDependency($variables, $event);

  if (!$event->isVideoPopup()) {
    return;
  }

  if ($variables['media'] instanceof IFrameMarkup) {
    preg_match('/<iframe.*src=["\']+([^"\']*)["\']+[^<>]*><\/iframe>/', $variables['media']->__toString(), $matches);
    if (!empty($matches[1])) {
      $url = Url::fromUri(OE_WEBTOOLS_COOKIE_CONSENT_EMBED_COOKIE_URL, [
        'query' => [
          'oriurl' => $matches[1],
          'lang' => \Drupal::languageManager()->getCurrentLanguage()->getId(),
        ],
      ]);
      $new_iframe = str_replace($matches[1], $url->toString(), $variables['media']->__toString());
      $variables['media'] = IFrameMarkup::create($new_iframe);
    }
  }
}
